{"desc":"View类","alias":"View","id":666,"methods":[{"desc":"对异步更新view的方法进行一次包装","alias":"View.wrapUpdate","id":679,"isStatic":true,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"wrapUpdate"},{"desc":"使用xhr获取当前view对应的模板内容，仅在开发app阶段时使用，打包上线后html与js打包在一起，不会调用这个方法","alias":"View#fetchTmpl","id":687,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"fetchTmpl","_params":[{"title":"param","desc":"路径","type":"String","name":"path"},{"title":"param","desc":"获取完成后的回调","type":"Function","name":"fn"}]},{"desc":"渲染view，供最终view开发者覆盖","alias":"View#render","id":688,"memberOf":"View","isa":"FUNCTION","_name":"render"},{"desc":"当window.location.href有变化时调用该方法（如果您通过observeLocation指定了相关参数，则这些相关参数有变化时才调用locationChange，否则不会调用），供最终的view开发人员进行覆盖","alias":"View#locationChange","id":689,"memberOf":"View","isa":"FUNCTION","_name":"locationChange","_params":[{"title":"param","desc":"事件对象","type":"Object","name":"e"},{"title":"param","desc":"window.location.href解析出来的对象","type":"Object","name":"e.location"},{"title":"param","desc":"包含有哪些变化的对象","type":"Object","name":"e.changed"},{"title":"param","desc":"阻止向所有子view传递locationChange的消息","type":"Function","name":"e.prevent"},{"title":"param","desc":"向特定的子view传递locationChange的消息","type":"Function","name":"e.toChildren"}],"example":[{"title":"example","desc":"//example1\rlocationChange:function(e){\r    if(e.changed.isPathname()){//pathname的改变\r        //...\r        e.prevent();//阻止向所有子view传递改变的消息\r    }\r}\r\r//example2\rlocationChange:function(e){\r    if(e.changed.isParam('menu')){//menu参数发生改变\r        e.toChildren('magix_vf_menus');//只向id为 magix_vf_menus的view传递这个消息\r    }\r}\r\r//example3\r//当不调用e.prevent或e.toChildren，则向所有子view传递消息\rlocationChange:function(e){\r    //...\r}"}]},{"desc":"初始化方法，供最终的view开发人员进行覆盖","alias":"View#init","id":690,"memberOf":"View","isa":"FUNCTION","_name":"init","_params":[{"title":"param","desc":"初始化时，外部传递的参数","type":"Object","name":"extra"}]},{"desc":"加载view内容","alias":"View#load","id":693,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"load"},{"desc":"通知当前view即将开始进行html的更新","alias":"View#beginUpdate","id":704,"memberOf":"View","isa":"FUNCTION","_name":"beginUpdate"},{"desc":"通知当前view结束html的更新","alias":"View#endUpdate","id":706,"memberOf":"View","isa":"FUNCTION","_name":"endUpdate"},{"type":"Integer","desc":"通知当前view进行更新，与beginUpdate不同的是：begin是开始更新html，notify是开始调用更新的方法，通常render与renderUI已经自动做了处理，对于用户自定义的获取数据并更新界面时，在开始更新前，需要调用一下该方法","alias":"View#notifyUpdate","id":709,"memberOf":"View","returns":[{"title":"return","desc":"当前view的签名","type":"Integer"}],"isa":"FUNCTION","_name":"notifyUpdate"},{"desc":"包装mx-event，自动添加mx-owner属性","alias":"View#wrapMxEvent","id":711,"memberOf":"View","isa":"FUNCTION","_name":"wrapMxEvent","_params":[{"title":"param","desc":"html字符串","type":"String","name":"html"}]},{"desc":"设置view的html内容","alias":"View#setViewHTML","id":713,"memberOf":"View","isa":"FUNCTION","_name":"setViewHTML","_params":[{"title":"param","desc":"html字符串","type":"Strig","name":"html"}],"example":[{"title":"example","desc":"render:function(){\r    this.setViewHTML(this.template);//渲染界面，当界面复杂时，请考虑用其它方案进行更新\r}"}]},{"desc":"指定要监视地址栏中的哪些值有变化时，或pathname有变化时，当前view的locationChange才会被调用。通常情况下location有变化就会引起当前view的locationChange被调用，但这会带来一些不必要的麻烦，所以你可以指定地址栏中哪些值有变化时才引起locationChange调用，使得view只关注与自已需要刷新有关的参数","alias":"View#observeLocation","id":717,"memberOf":"View","isa":"FUNCTION","_name":"observeLocation","_params":[{"title":"param","desc":"数组字符串或对象","type":"Array|String|Object","name":"args"}],"example":[{"title":"example","desc":"return View.extend({\r     init:function(){\r         this.observeLocation('page,rows');//关注地址栏中的page rows2个参数的变化，当其中的任意一个改变时，才引起当前view的locationChange被调用\r         this.observeLocation({\r             pathname:true//关注pathname的变化\r         });\r         //也可以写成下面的形式\r         //this.observeLocation({\r         //    keys:['page','rows'],\r         //    pathname:true\r         //})\r     },\r     locationChange:function(e){\r         if(e.changed.isParam('page')){};//检测是否是page发生的改变\r         if(e.changed.isParam('rows')){};//检测是否是rows发生的改变\r     }\r});"}]},{"type":"Boolean","desc":"检测通过observeLocation方法指定的key对应的值有没有发生变化","alias":"View#olChanged","id":726,"memberOf":"View","returns":[{"title":"return","desc":"是否发生改变","type":"Boolean"}],"isPrivate":true,"isa":"FUNCTION","_name":"olChanged","_params":[{"title":"param","desc":"对象","type":"Object","name":"changed"}]},{"desc":"销毁当前view","alias":"View#destroy","id":733,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"destroy"},{"type":"View","desc":"获取渲染当前view的父view","alias":"View#parentView","id":736,"memberOf":"View","returns":[{"title":"return","type":"View"}],"isa":"FUNCTION","_name":"parentView"},{"desc":"处理dom事件","alias":"View#processEvent","id":743,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"processEvent","_params":[{"title":"param","desc":"dom事件对象","type":"Event","name":"e"}]},{"desc":"处理代理事件","alias":"View#delegateEvents","id":765,"memberOf":"View","isPrivate":true,"isa":"FUNCTION","_name":"delegateEvents","_params":[{"title":"param","desc":"是否冒泡的事件","type":"Boolean","name":"bubble"},{"title":"param","desc":"是否销毁","type":"Boolean","name":"dispose"}]},{"desc":"绑定事件","alias":"View#on","id":1266,"memberOf":"View","isa":"FUNCTION","_name":"on","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"},{"title":"param","desc":"事件监听插入的位置或触发后是否移除监听","type":"Interger|Boolean","name":"insertOrRemove"}],"example":[{"title":"example","desc":"var T=Magix.mix({},Event);\rT.on('done',function(e){\r\r});\r\rT.on('done',function(e){\r\r},0)//监听插入到开始位置\r\rT.on('done',function(e){\r\r},true)//触发后即删除该监听\r\rT.fire('done',{\r    data:'test'\r})"}]},{"desc":"触发事件","alias":"View#fire","id":1267,"memberOf":"View","isa":"FUNCTION","_name":"fire","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件对象","type":"Object","name":"data"},{"title":"param","desc":"事件触发完成后是否移除这个事件的所有监听","type":"Boolean","name":"remove"},{"title":"param","desc":"是否从后向前触发事件的监听列表","type":"Boolean","name":"lastToFirst"}]},{"desc":"解除事件绑定","alias":"View#un","id":1268,"memberOf":"View","isa":"FUNCTION","_name":"un","_params":[{"title":"param","desc":"事件名称","type":"String","name":"name"},{"title":"param","desc":"事件回调","type":"Function","name":"fn"}]}],"events":[{"desc":"当view调用setViewHTML刷新前触发","alias":"View#event:prerender","id":771,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"prerender","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"当view首次完成界面的html设置后触发，view有没有模板均会触发该事件，对于有模板的view，会等到模板取回，第一次调用setViewHTML更新界面后才触发，总之该事件触发后，您就可以访问view的HTML DOM节点对象（该事件仅代表自身的html创建完成，如果需要对整个子view也要监控，请使用created事件）","alias":"View#event:primed","id":772,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"primed","_params":[{"title":"param","desc":"view首次调用render完成界面的创建后触发","type":"Object","name":"e"}]},{"desc":"每次调用setViewHTML更新view内容完成后触发","alias":"View#event:rendered","id":773,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"rendered","_params":[{"title":"param","desc":"view每次调用setViewHTML完成后触发，当hasTmpl属性为false时，并不会触发该事 件，但会触发primed首次完成创建界面的事件","type":"Object","name":"e"}]},{"desc":"view销毁时触发","alias":"View#event:destroy","id":774,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"destroy","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"view调用init方法后触发","alias":"View#event:inited","id":775,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"inited","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"view自身和所有子孙view创建完成后触发，常用于要在某个view中统一绑定事件或统一做字段校验，而这个view是由许多子孙view组成的，通过监听该事件可知道子孙view什么时间创建完成（注意：当view中有子view，且该子view是通过程序动态mountView而不是通过mx-view指定时，该事件会也会等待到view创建完成触发，而对于您在某个view中有如下代码：<div><vframe></vframe></div>，有一个空的vframe且未指定mx-view属性，同时您在这个view中没有动态渲染vframe对应的view，则该事件不会触发，magix无法识别出您留空vframe的意图，到底是需要动态mount还是手误，不过在具体应用中，出现空vframe且没有动态mount几乎是不存在的^_^）","alias":"View#event:created","id":776,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"created","_params":[{"title":"param","type":"Object","name":"e"}],"example":[{"title":"example","desc":"init:function(){\r     this.on('created',function(){\r         //\r     })\r}"}]},{"desc":"view自身和所有子孙view有改动时触发，改动包括刷新和重新mountView，与created一起使用，当view自身和所有子孙view创建完成会触发created，当其中的一个view刷新或重新mountView，会触发childrenAlter，当是刷新时，刷新完成会再次触发created事件，因此这2个事件不只触发一次！！但这2个事件会成对触发，比如触发几次childrenAlter就会触发几次created","alias":"View#event:alter","id":777,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"alter","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"异步更新ui的方法(render,renderUI)被调用前触发","alias":"View#event:rendercall","id":778,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"rendercall","_params":[{"title":"param","type":"Object","name":"e"}]},{"desc":"每次调用beginUpdate更新view内容前触发","alias":"View#event:refresh","id":779,"memberOf":"View","isEvent":true,"isa":"FUNCTION","_name":"refresh","_params":[{"title":"param","desc":"与prerender不同的是：refresh触发后即删除监听列表","type":"Object","name":"e"}]}],"isa":"CONSTRUCTOR","_name":"View","_params":[{"title":"param","desc":"创建view时，需要附加到view对象上的其它属性","type":"Object","name":"ops"}],"inherits":[{"alias":"Event.on","as":"View#on"},{"alias":"Event.fire","as":"View#fire"},{"alias":"Event.un","as":"View#un"}],"example":[{"title":"example","desc":"关于View.prototype.events:\r示例：\r  html写法：\r\r  &lt;input type=\"button\" mx-click=\"test{id:100,name:xinglie}\" value=\"test\" /&gt;\r  &lt;a href=\"http://etao.com\" mx-click=\"test&lt;prevent&gt;{com:etao.com}\"&gt;http://etao.com&lt;/a&gt;\r\r  view写法：\r\r  events:{\r     click:{\r         test:function(e){\r             //e.view  当前view对象\r             //e.currentId 处理事件的dom节点id(即带有mx-click属性的节点)\r             //e.targetId 触发事件的dom节点id(即鼠标点中的节点，在currentId里包含其它节点时，currentId与targetId有可能不一样)\r             //e.events  view.events对象，可访问其它事件对象，如：e.events.mousedown.test\r             //e.params  传递的参数\r             //e.params.com,e.params.id,e.params.name\r         }\r     },\r     mousedown:{\r         test:function(e){\r\r         }\r     }\r  }"}],"properties":[{"type":"Object","desc":"事件对象","alias":"View#events","id":667,"memberOf":"View","isa":"OBJECT","_name":"events"},{"type":"String","desc":"当前view与页面vframe节点对应的id","alias":"View#id","id":668,"memberOf":"View","isa":"OBJECT","_name":"id"},{"type":"Vframe","desc":"拥有当前view的vframe对象","alias":"View#owner","id":669,"memberOf":"View","isa":"OBJECT","_name":"owner"},{"type":"Object","desc":"vom对象","alias":"View#vom","id":670,"memberOf":"View","isa":"OBJECT","_name":"vom"},{"type":"Integer","desc":"view的签名，用于刷新，销毁等的异步标识判断","alias":"View#sign","id":671,"memberOf":"View","isa":"OBJECT","_name":"sign"},{"type":"String","desc":"当前view对应的模板字符串(当hasTmpl为true时)，该属性在primed事件触发后才存在","alias":"View#template","id":672,"memberOf":"View","isa":"OBJECT","_name":"template"},{"type":"Boolean","desc":"标识当前view有没有渲染过，即primed事件有没有触发过","alias":"View#rendered","id":673,"memberOf":"View","isa":"OBJECT","_name":"rendered"},{"type":"Object","desc":"window.locaiton.href解析出来的对象","alias":"View#location","id":674,"memberOf":"View","isa":"OBJECT","_name":"location"},{"desc":"标识当前view是否有模板文件","alias":"View#hasTmpl","id":691,"memberOf":"View","defaultValue":"true","isa":"OBJECT","_name":"hasTmpl"},{"desc":"是否启用DOM事件(events对象指定的事件是否生效)","alias":"View#enableEvent","id":692,"memberOf":"View","defaultValue":"true","isa":"OBJECT","_name":"enableEvent","example":[{"title":"example","desc":"该属性在做浏览器兼容时有用：支持pushState的浏览器阻止a标签的默认行为，转用pushState，不支持时直接a标签跳转，view不启用事件\rQ:为什么不支持history state的浏览器上还要使用view？\rA:考虑 http://etao.com/list?page=2#!/list?page=3; 在IE6上，实际的页码是3，但后台生成时候生成的页码是2，<br />所以需要magix/view载入后对相应的a标签链接进行处理成实际的3。用户点击链接时，由于view没启用事件，不会阻止a标签的默认行为，后续才是正确的结果"}]}]}